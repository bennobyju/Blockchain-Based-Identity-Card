"use client";
"use client";

import { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';

// Message to be signed by the user for authentication
const SIGN_MESSAGE = "I am signing this message to authenticate with BlockID and prove I am the owner of this wallet address.";

export default function useWalletAuth() {
  const [address, setAddress] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [isSigning, setIsSigning] = useState(false);
  const [availableWallets, setAvailableWallets] = useState([]);
  const [error, setError] = useState(null);
  const { login, logout: authLogout } = useAuth();

  // Detect available wallets
  useEffect(() => {
    const detectWallets = () => {
      const detected = [];
      
      // Check for MetaMask
      if (window.ethereum?.isMetaMask) {
        detected.push({
          name: "MetaMask",
          icon: "🦊",
          provider: window.ethereum
        });
      }
      
      // Check for Coinbase Wallet
      if (window.ethereum?.isCoinbaseWallet || window.coinbaseWalletExtension) {
        detected.push({
          name: "Coinbase Wallet",
          icon: "🔵",
          provider: window.ethereum || window.coinbaseWalletExtension
        });
      }
      
      // Check for Trust Wallet
      if (window.ethereum?.isTrust || window.trustWallet) {
        detected.push({
          name: "Trust Wallet",
          icon: "🔐",
          provider: window.ethereum || window.trustWallet
        });
      }
      
      // Generic fallback for other injected providers
      if (detected.length === 0 && window.ethereum) {
        detected.push({
          name: "Browser Wallet",
          icon: "🔑",
          provider: window.ethereum
        });
      }
      
      setAvailableWallets(detected);
    };
    
    if (typeof window !== 'undefined') {
      detectWallets();
      
      // Also detect wallets that may be injected after page load
      window.addEventListener('ethereum#initialized', detectWallets);
    }
    
    return () => {
      if (typeof window !== 'undefined') {
        window.removeEventListener('ethereum#initialized', detectWallets);
      }
    };
  }, []);

  // Effect to handle connection status changes
  useEffect(() => {
    const handleAccountsChanged = (accounts) => {
      if (accounts.length === 0) {
        // User disconnected wallet
        setAddress('');
        setIsConnected(false);
        authLogout();
      } else {
        // User wallet is connected
        setAddress(accounts[0]);
        setIsConnected(true);
      }
    };
    
    // Set up listeners for account changes
    if (typeof window !== 'undefined' && window.ethereum) {
      // Check if already connected
      window.ethereum.request({ method: 'eth_accounts' })
        .then(handleAccountsChanged)
        .catch(err => console.error("Error checking accounts:", err));
      
      // Listen for account changes
      window.ethereum.on('accountsChanged', handleAccountsChanged);
      
      // Handle chain changes
      window.ethereum.on('chainChanged', () => {
        window.location.reload();
      });
    }
    
    return () => {
      if (typeof window !== 'undefined' && window.ethereum) {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
      }
    };
  }, [authLogout]);

  // Function to connect using a specific wallet provider
  const connectWithProvider = async (provider) => {
    setIsConnecting(true);
    setError(null);
    
    try {
      // Request account access - this triggers the wallet connect popup
      const accounts = await provider.request({ 
        method: 'eth_requestAccounts' 
      });
      
      if (accounts.length === 0) {
        throw new Error("No accounts returned from wallet");
      }
      
      const userAddress = accounts[0];
      setAddress(userAddress);
      setIsConnected(true);
      
      // Request signature - this triggers the signature popup
      setIsSigning(true);
      
      try {
        // Get the chain ID
        const chainId = await provider.request({ method: 'eth_chainId' });
        
        // Request signature
        const signature = await signMessage(provider, userAddress, SIGN_MESSAGE);
        
        // Create user object with address, chain ID, signature
        const userData = {
          address: userAddress,
          chainId,
          signature,
          connectedAt: new Date().toISOString(),
        };
        
        // Generate token including signature verification
        const token = `blockid_${Date.now()}_${userAddress.substring(2, 10)}_${signature.substring(0, 10)}`;
        
        // Login with auth context
        login(userData, token);
        
        return { success: true, address: userAddress };
      } catch (signError) {
        console.error("Signature error:", signError);
        setError("Authentication requires your signature. Please try again.");
        // We don't disconnect here - user may try again
        return { success: false, error: signError.message };
      } finally {
        setIsSigning(false);
      }
    } catch (error) {
      console.error('Connection error:', error);
      setError(error.message || "Failed to connect wallet");
      setAddress('');
      setIsConnected(false);
      return { success: false, error: error.message };
    } finally {
      setIsConnecting(false);
    }
  };

  // Sign a message using the provider
  const signMessage = async (provider, address, message) => {
    try {
      // For modern providers (EIP-1193)
      return await provider.request({
        method: 'personal_sign',
        params: [message, address]
      });
    } catch (error) {
      console.error("Error signing message:", error);
      throw error;
    }
  };

  // Function to connect wallet - shows available wallets if multiple exist
  const connect = async (walletIndex = 0) => {
    setError(null);
    
    // If no wallets available
    if (availableWallets.length === 0) {
      if (typeof window !== 'undefined' && !window.ethereum) {
        setError("No Ethereum wallet detected. Please install MetaMask or another wallet.");
        window.open('https://metamask.io/download/', '_blank');
        return { success: false, error: "No wallet detected" };
      }
      
      // Fallback to window.ethereum if no specific wallets detected
      return connectWithProvider(window.ethereum);
    }
    
    // If index is provided and valid, use the specific wallet
    if (walletIndex >= 0 && walletIndex < availableWallets.length) {
      return connectWithProvider(availableWallets[walletIndex].provider);
    }
    
    // Default to first wallet if there's only one
    if (availableWallets.length === 1) {
      return connectWithProvider(availableWallets[0].provider);
    }
    
    // If we reach here, multiple wallets are available but no index was specified
    // The UI should handle showing wallet selection in this case
    return { 
      success: false, 
      availableWallets,
      error: "Please select a wallet to connect"
    };
  };

  // Function to disconnect wallet
  const disconnect = () => {
    setAddress('');
    setIsConnected(false);
    authLogout();
  };

  return {
    address,
    isConnected,
    isConnecting,
    isSigning,
    availableWallets,
    error,
    connect,
    connectWithProvider,
    disconnect
  };
} 
